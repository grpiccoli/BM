<partial name="_Libs" model='new List<string> { "fine-uploader" }' />

@this.Block(@<script type="text/template" id="qq-template-manual-trigger">
        <div class="qq-uploader-selector qq-uploader" qq-drop-area-text="Arroje archivos aquí">
            <div class="qq-total-progress-bar-container-selector qq-total-progress-bar-container">
                <div role="progressbar" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100" class="qq-total-progress-bar-selector qq-progress-bar qq-total-progress-bar"></div>
            </div>
            <div class="qq-upload-drop-area-selector qq-upload-drop-area" qq-hide-dropzone>
                <span class="qq-upload-drop-area-text-selector"></span>
            </div>
            <div class="buttons">
                <div class="qq-upload-button-selector qq-upload-button w-50">
                    <div>Buscar archivos</div>
                </div>
                <button type="button" id="trigger-upload" class="btn btn-primary">
                    <i class="icon-upload icon-white"></i> Subir
                </button>
            </div>
            <span class="qq-drop-processing-selector qq-drop-processing">
                <span>Processing dropped files...</span>
                <span class="qq-drop-processing-spinner-selector qq-drop-processing-spinner"></span>
            </span>
            <ul class="qq-upload-list-selector qq-upload-list" aria-live="polite" aria-relevant="additions removals">
                <li>
                    <div class="qq-progress-bar-container-selector">
                        <div role="progressbar" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100" class="qq-progress-bar-selector qq-progress-bar"></div>
                    </div>
                    <span class="qq-upload-spinner-selector qq-upload-spinner"></span>
                    <img class="qq-thumbnail-selector" qq-max-size="100" qq-server-scale>
                    <span class="qq-upload-file-selector qq-upload-file"></span>
                    <span class="qq-edit-filename-icon-selector qq-edit-filename-icon" aria-label="Editar nombre de archivo"></span>
                    <input class="qq-edit-filename-selector qq-edit-filename" tabindex="0" type="text">
                    <span class="qq-upload-size-selector qq-upload-size"></span>
                    <button type="button" class="qq-btn qq-upload-cancel-selector qq-upload-cancel">Cancelar</button>
                    <button type="button" class="qq-btn qq-upload-retry-selector qq-upload-retry">Reintentar</button>
                    <button type="button" class="qq-btn qq-upload-delete-selector qq-upload-delete">Eliminar</button>
                    <span role="status" class="qq-upload-status-text-selector qq-upload-status-text"></span>
                </li>
            </ul>
        </div>
    </script>, "Styles")
@this.Block(@<style>
    .qq-upload-list{
        max-height:400px;
    }
    #trigger-upload {
        color: white;
        background-color: #00ABC7;
        font-size: 14px;
        padding: 7px 20px;
        background-image: none;
    }
    #fine-uploader-manual-trigger .qq-upload-button {
        margin-right: 15px;
    }
    #fine-uploader-manual-trigger .buttons {
        width: 36%;
    }
    #fine-uploader-manual-trigger .qq-uploader .qq-total-progress-bar-container {
        width: 60%;
    }
</style>, "Styles")
<div id="fine-uploader-manual-trigger"></div>
@this.Block(
@<script>
    var token = $('input:hidden[name="__RequestVerificationToken"]').val();
        var manualUploader = new qq.FineUploader({
            element: document.getElementById('fine-uploader-manual-trigger'),
            form: {
                element: "upload"
            },
            template: 'qq-template-manual-trigger',
            request: {
                endpoint: '@Url.Action("CreateFito","Entries")',
                //customHeaders: {
                //    'X-CSRF-TOKEN': token,
                //    'X-CSRFToken': token
                //},  // for token validation
                params: {
                    pid: 1,
                    aid: 1
                    //'csrfmiddlewaretoken': token
                }  // any custom params about file
            },
            thumbnails: {
                placeholders: {
                    waitingPath: '/lib/fine-uploader/fine-uploader/placeholders/waiting-generic.png',
                    notAvailablePath: '/images/thumbs/excel.png'
                }
            },
            validation: {
                allowedExtensions: ['xls'],
                itemLimit: 10000,
                sizeLimit: 20971520
            },
            autoUpload: false,
            debug: true,
            failedUploadTextDisplay: {
                mode: 'custom' 
            },
            text: {
                // localize text, for example - RUSSIAN (comment this for english)
                paused: 'pausado',
                failUpload:'Falló la subida',
                defaultResponseError: 'Error de carga por motivo desconocido',
                formatProgress: '{percent}% de {total_size}',
                waitingForResponse: 'Procesando...'
            },
            messages: {
                // localize text, for example - RUSSIAN (comment this for english)
                //tooManyItemsError: "Too many items ({netItems}) would be uploaded.  Item limit is {itemLimit}.",
                tooManyFilesError: 'Demasiados archivos ({netItems}), el límite son {itemLimit}.',
                unsupportedBrowser: 'Error irrecuperable - el navegador no permite la carga de archivos',
                emptyError: '{file} está vacio',
                noFilesError: 'Sin archivos para subir',
                onLeave:'Los archivos están siendo cargados, ¿quiere cancelar la carga de archivos?'
            },
            retry: {
                autoRetryNote: 'Reintentado {retryNum}/{maxAuto}'
            },
            showMessage: function (message) {
                // for show error in some div instead of modal message
                $('#MessageUploaderError').html(message);
            }, callbacks: {
                onSubmit: function (id, name) {
                    console.log("in onSubmit: " + id + " | " + name);
                },
            }
        });

    qq(document.getElementById("trigger-upload")).attach("click", function () {
        manualUploader.uploadStoredFiles();
    });
</script>, "Scripts")