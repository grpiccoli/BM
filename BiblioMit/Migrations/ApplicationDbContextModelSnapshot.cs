// <auto-generated />
using System;
using BiblioMit.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BiblioMit.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BiblioMit.Models.Analysis", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CentreId");

                    b.Property<DateTime>("Date");

                    b.HasKey("Id");

                    b.HasIndex("CentreId");

                    b.ToTable("Analysis");
                });

            modelBuilder.Entity("BiblioMit.Models.AppRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Description");

                    b.Property<string>("IPAddress");

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("BiblioMit.Models.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("IsActive");

                    b.Property<string>("Last");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<DateTime>("MemberSince");

                    b.Property<string>("Name");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("ProfileImageUrl");

                    b.Property<int>("Rating");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("BiblioMit.Models.AreaCode", b =>
                {
                    b.Property<int>("Id");

                    b.HasKey("Id");

                    b.ToTable("AreaCode");
                });

            modelBuilder.Entity("BiblioMit.Models.AreaCodeProvincia", b =>
                {
                    b.Property<int>("AreaCodeId");

                    b.Property<int>("ProvinciaId");

                    b.HasKey("AreaCodeId", "ProvinciaId");

                    b.HasIndex("ProvinciaId");

                    b.ToTable("AreaCodeProvincia");
                });

            modelBuilder.Entity("BiblioMit.Models.Centre", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Acronym");

                    b.Property<string>("Address");

                    b.Property<bool?>("Certificable");

                    b.Property<int>("CompanyId");

                    b.Property<int?>("ComunaId");

                    b.Property<int?>("CuerpoAgua");

                    b.Property<int?>("FolioRNA");

                    b.Property<string>("Name");

                    b.Property<int?>("PSMBId");

                    b.Property<int>("Type");

                    b.Property<string>("Url");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("ComunaId");

                    b.HasIndex("PSMBId");

                    b.ToTable("Centre");
                });

            modelBuilder.Entity("BiblioMit.Models.CentreProducto", b =>
                {
                    b.Property<int>("CentreId");

                    b.Property<string>("ProductoId");

                    b.HasKey("CentreId", "ProductoId");

                    b.HasIndex("ProductoId");

                    b.ToTable("CentreProducto");
                });

            modelBuilder.Entity("BiblioMit.Models.Columna", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description");

                    b.Property<int>("ExcelId");

                    b.Property<string>("Name");

                    b.Property<string>("Operation");

                    b.HasKey("Id");

                    b.HasIndex("ExcelId");

                    b.ToTable("Columna");
                });

            modelBuilder.Entity("BiblioMit.Models.Company", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Acronym");

                    b.Property<string>("Address");

                    b.Property<string>("BsnssName");

                    b.HasKey("Id");

                    b.ToTable("Company");
                });

            modelBuilder.Entity("BiblioMit.Models.Comuna", b =>
                {
                    b.Property<int>("Id");

                    b.Property<int>("CS");

                    b.Property<int>("CuencaId");

                    b.Property<int>("DE");

                    b.Property<string>("Name");

                    b.Property<int>("ProvinciaId");

                    b.HasKey("Id");

                    b.HasIndex("CuencaId");

                    b.HasIndex("ProvinciaId");

                    b.ToTable("Comuna");
                });

            modelBuilder.Entity("BiblioMit.Models.Contact", b =>
                {
                    b.Property<int>("ContactId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CentreId");

                    b.Property<DateTime>("CloseHr");

                    b.Property<string>("Description");

                    b.Property<string>("Email");

                    b.Property<string>("Last");

                    b.Property<string>("Name");

                    b.Property<DateTime>("OpenHr");

                    b.Property<string>("OwnerId");

                    b.Property<long>("Phone");

                    b.Property<int>("Position");

                    b.Property<int>("Status");

                    b.HasKey("ContactId");

                    b.HasIndex("CentreId");

                    b.ToTable("Contact");
                });

            modelBuilder.Entity("BiblioMit.Models.Coordinate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CentreId");

                    b.Property<int?>("CuencaId");

                    b.Property<double>("Latitude");

                    b.Property<double>("Longitude");

                    b.Property<int?>("PSMBId");

                    b.Property<int?>("PolygonId");

                    b.Property<int>("Vertex");

                    b.HasKey("Id");

                    b.HasIndex("CentreId");

                    b.HasIndex("CuencaId");

                    b.HasIndex("PSMBId");

                    b.HasIndex("PolygonId");

                    b.ToTable("Coordinate");
                });

            modelBuilder.Entity("BiblioMit.Models.Cuenca", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Cuenca");
                });

            modelBuilder.Entity("BiblioMit.Models.EnsayoFito", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Analista");

                    b.Property<int?>("CentreId");

                    b.Property<string>("Email");

                    b.Property<string>("EntidadMuestreadora");

                    b.Property<string>("Estacion");

                    b.Property<DateTime>("FechaEnvio");

                    b.Property<DateTime>("FechaMuestreo");

                    b.Property<DateTime>("FinAnalisis");

                    b.Property<DateTime>("InicioAnalisis");

                    b.Property<string>("Laboratorio");

                    b.Property<int>("Muestras");

                    b.Property<double?>("Oxigeno");

                    b.Property<int>("PSMBId");

                    b.Property<double?>("Ph");

                    b.Property<DateTime>("Recepcion");

                    b.Property<double?>("Salinidad");

                    b.Property<string>("Telefono");

                    b.Property<double?>("Temperatura");

                    b.HasKey("Id");

                    b.HasIndex("CentreId");

                    b.HasIndex("PSMBId");

                    b.ToTable("EnsayoFito");
                });

            modelBuilder.Entity("BiblioMit.Models.Excel", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Excel");
                });

            modelBuilder.Entity("BiblioMit.Models.Forum", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created");

                    b.Property<string>("Description");

                    b.Property<string>("ImageUrl");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.ToTable("Forum");
                });

            modelBuilder.Entity("BiblioMit.Models.Groups", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("BiblioMit.Models.Individual", b =>
                {
                    b.Property<int>("Id");

                    b.Property<int?>("ADG");

                    b.Property<string>("Comment");

                    b.Property<int?>("Depth");

                    b.Property<int>("Length");

                    b.Property<int>("Maturity");

                    b.Property<int>("Number");

                    b.Property<int>("SamplingId");

                    b.Property<int>("Sex");

                    b.Property<string>("Tag");

                    b.HasKey("Id");

                    b.HasIndex("SamplingId");

                    b.ToTable("Individual");
                });

            modelBuilder.Entity("BiblioMit.Models.Larva", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Count");

                    b.Property<int>("LarvaType");

                    b.Property<int>("LarvaeId");

                    b.Property<int>("SpecieId");

                    b.HasKey("Id");

                    b.HasIndex("LarvaeId");

                    b.HasIndex("SpecieId");

                    b.ToTable("Larva");
                });

            modelBuilder.Entity("BiblioMit.Models.Larvae", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CentreId");

                    b.Property<DateTime>("Date");

                    b.HasKey("Id");

                    b.HasIndex("CentreId");

                    b.ToTable("Larvae");
                });

            modelBuilder.Entity("BiblioMit.Models.Origen", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Origen");
                });

            modelBuilder.Entity("BiblioMit.Models.PSMB", b =>
                {
                    b.Property<int>("Id");

                    b.Property<int>("ComunaId");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("ComunaId");

                    b.ToTable("PSMB");
                });

            modelBuilder.Entity("BiblioMit.Models.Photo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Comment");

                    b.Property<int>("IndividualId");

                    b.Property<string>("Key");

                    b.Property<int>("Magnification");

                    b.Property<int?>("SoftId");

                    b.Property<int?>("ValveId");

                    b.HasKey("Id");

                    b.HasIndex("IndividualId");

                    b.HasIndex("SoftId");

                    b.HasIndex("ValveId");

                    b.ToTable("Photo");
                });

            modelBuilder.Entity("BiblioMit.Models.Phytoplankton", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("C");

                    b.Property<int?>("EAR");

                    b.Property<int>("EnsayoFitoId");

                    b.Property<int>("GroupsId");

                    b.Property<string>("Species");

                    b.HasKey("Id");

                    b.HasIndex("EnsayoFitoId");

                    b.HasIndex("GroupsId");

                    b.ToTable("Phytoplankton");
                });

            modelBuilder.Entity("BiblioMit.Models.Planilla", b =>
                {
                    b.Property<long>("Id");

                    b.Property<int>("CentreId");

                    b.Property<int>("Dato");

                    b.Property<int>("Declaracion");

                    b.Property<DateTime>("Fecha");

                    b.Property<int?>("OrigenId");

                    b.Property<double>("Peso");

                    b.Property<int?>("TipoItemProduccion");

                    b.Property<int?>("TipoProduccion");

                    b.HasKey("Id");

                    b.HasIndex("CentreId");

                    b.HasIndex("OrigenId");

                    b.ToTable("Planilla");
                });

            modelBuilder.Entity("BiblioMit.Models.PlataformaUser", b =>
                {
                    b.Property<string>("AppUserId");

                    b.Property<int>("PlataformId");

                    b.HasKey("AppUserId", "PlataformId");

                    b.HasIndex("PlataformId");

                    b.ToTable("PlataformaUser");
                });

            modelBuilder.Entity("BiblioMit.Models.Platform", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Plataforma");

                    b.HasKey("Id");

                    b.ToTable("Platform");
                });

            modelBuilder.Entity("BiblioMit.Models.Polygon", b =>
                {
                    b.Property<int>("Id");

                    b.Property<int?>("ComunaId");

                    b.Property<int?>("ProvinciaId");

                    b.Property<int?>("RegionId");

                    b.HasKey("Id");

                    b.HasIndex("ComunaId");

                    b.HasIndex("ProvinciaId");

                    b.HasIndex("RegionId");

                    b.ToTable("Polygon");
                });

            modelBuilder.Entity("BiblioMit.Models.Post", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content");

                    b.Property<DateTime>("Created");

                    b.Property<int>("ForumId");

                    b.Property<string>("Title");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ForumId");

                    b.HasIndex("UserId");

                    b.ToTable("Post");
                });

            modelBuilder.Entity("BiblioMit.Models.PostReply", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content");

                    b.Property<DateTime>("Created");

                    b.Property<int?>("PostId");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("PostReply");
                });

            modelBuilder.Entity("BiblioMit.Models.ProdEntry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Actualizadas");

                    b.Property<int>("Agregadas");

                    b.Property<string>("AppUserId");

                    b.Property<DateTime>("Date");

                    b.Property<string>("FileName");

                    b.Property<string>("IP");

                    b.Property<DateTime>("Max");

                    b.Property<DateTime>("Min");

                    b.Property<int>("Observaciones");

                    b.Property<string>("OutPut");

                    b.Property<int>("Reportes");

                    b.Property<bool>("Success");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.ToTable("ProdEntry");
                });

            modelBuilder.Entity("BiblioMit.Models.Producto", b =>
                {
                    b.Property<string>("Id");

                    b.HasKey("Id");

                    b.ToTable("Producto");
                });

            modelBuilder.Entity("BiblioMit.Models.Provincia", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Name");

                    b.Property<int>("Population");

                    b.Property<int>("RegionId");

                    b.Property<int>("Surface");

                    b.HasKey("Id");

                    b.HasIndex("RegionId");

                    b.ToTable("Provincia");
                });

            modelBuilder.Entity("BiblioMit.Models.Region", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Name");

                    b.Property<int>("Pop2002");

                    b.Property<int>("Pop2010");

                    b.Property<int>("Surface");

                    b.HasKey("Id");

                    b.ToTable("Region");
                });

            modelBuilder.Entity("BiblioMit.Models.RepStage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Proportion");

                    b.Property<int>("SpawningId");

                    b.Property<int>("Stage");

                    b.HasKey("Id");

                    b.HasIndex("SpawningId");

                    b.ToTable("RepStage");
                });

            modelBuilder.Entity("BiblioMit.Models.Sampling", b =>
                {
                    b.Property<int>("Id");

                    b.Property<int>("CentreId");

                    b.Property<DateTime>("Date");

                    b.Property<double?>("O2");

                    b.Property<int?>("Salinity");

                    b.Property<double?>("Temp");

                    b.HasKey("Id");

                    b.HasIndex("CentreId");

                    b.ToTable("Sampling");
                });

            modelBuilder.Entity("BiblioMit.Models.Seed", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CentreId");

                    b.Property<DateTime>("Date");

                    b.Property<DateTime>("DateCuelga");

                    b.HasKey("Id");

                    b.HasIndex("CentreId");

                    b.ToTable("Seed");
                });

            modelBuilder.Entity("BiblioMit.Models.Soft", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Count");

                    b.Property<int?>("Degree");

                    b.Property<int>("IndividualId");

                    b.Property<int>("SoftType");

                    b.Property<int>("Tissue");

                    b.HasKey("Id");

                    b.HasIndex("IndividualId");

                    b.ToTable("Soft");
                });

            modelBuilder.Entity("BiblioMit.Models.Spawning", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CentreId");

                    b.Property<DateTime>("Date");

                    b.Property<double>("FemaleIG");

                    b.Property<int>("FemaleProportion");

                    b.Property<double>("MaleIG");

                    b.Property<int>("MaleProportion");

                    b.HasKey("Id");

                    b.HasIndex("CentreId");

                    b.ToTable("Spawning");
                });

            modelBuilder.Entity("BiblioMit.Models.Specie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.Property<string>("Sp");

                    b.HasKey("Id");

                    b.ToTable("Specie");
                });

            modelBuilder.Entity("BiblioMit.Models.SpecieSeed", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Capture");

                    b.Property<double>("Proportion");

                    b.Property<int>("SeedId");

                    b.Property<int>("SpecieId");

                    b.HasKey("Id");

                    b.HasIndex("SeedId");

                    b.HasIndex("SpecieId");

                    b.ToTable("SpecieSeed");
                });

            modelBuilder.Entity("BiblioMit.Models.Talla", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Proportion");

                    b.Property<int>("Range");

                    b.Property<int>("SpecieSeedId");

                    b.HasKey("Id");

                    b.HasIndex("SpecieSeedId");

                    b.ToTable("Talla");
                });

            modelBuilder.Entity("BiblioMit.Models.Valve", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Comment");

                    b.Property<int>("IndividualId");

                    b.Property<string>("Species");

                    b.Property<int>("ValveType");

                    b.HasKey("Id");

                    b.HasIndex("IndividualId");

                    b.ToTable("Valve");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AppRoleId");

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("AppRoleId");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUserRole<string>");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("BiblioMit.Models.AppUserRole", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUserRole<string>");

                    b.Property<string>("RoleAssigner");

                    b.HasDiscriminator().HasValue("AppUserRole");
                });

            modelBuilder.Entity("BiblioMit.Models.Analysis", b =>
                {
                    b.HasOne("BiblioMit.Models.Centre", "Centre")
                        .WithMany("Analyses")
                        .HasForeignKey("CentreId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BiblioMit.Models.AreaCodeProvincia", b =>
                {
                    b.HasOne("BiblioMit.Models.AreaCode", "AreaCode")
                        .WithMany("AreaCodeProvincias")
                        .HasForeignKey("AreaCodeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BiblioMit.Models.Provincia", "Provincia")
                        .WithMany("AreaCodeProvincias")
                        .HasForeignKey("ProvinciaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BiblioMit.Models.Centre", b =>
                {
                    b.HasOne("BiblioMit.Models.Company", "Company")
                        .WithMany("Centres")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BiblioMit.Models.Comuna", "Comuna")
                        .WithMany("Centres")
                        .HasForeignKey("ComunaId");

                    b.HasOne("BiblioMit.Models.PSMB", "PSMB")
                        .WithMany("Centres")
                        .HasForeignKey("PSMBId");
                });

            modelBuilder.Entity("BiblioMit.Models.CentreProducto", b =>
                {
                    b.HasOne("BiblioMit.Models.Centre", "Planta")
                        .WithMany("Productos")
                        .HasForeignKey("CentreId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BiblioMit.Models.Producto", "Producto")
                        .WithMany("Plantas")
                        .HasForeignKey("ProductoId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BiblioMit.Models.Columna", b =>
                {
                    b.HasOne("BiblioMit.Models.Excel", "Excel")
                        .WithMany("Columnas")
                        .HasForeignKey("ExcelId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BiblioMit.Models.Comuna", b =>
                {
                    b.HasOne("BiblioMit.Models.Cuenca", "Cuenca")
                        .WithMany("Comunas")
                        .HasForeignKey("CuencaId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BiblioMit.Models.Provincia", "Provincia")
                        .WithMany("Comunas")
                        .HasForeignKey("ProvinciaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BiblioMit.Models.Contact", b =>
                {
                    b.HasOne("BiblioMit.Models.Centre", "Centre")
                        .WithMany("Contacts")
                        .HasForeignKey("CentreId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BiblioMit.Models.Coordinate", b =>
                {
                    b.HasOne("BiblioMit.Models.Centre", "Centre")
                        .WithMany("Coordinates")
                        .HasForeignKey("CentreId");

                    b.HasOne("BiblioMit.Models.Cuenca", "Cuenca")
                        .WithMany("Coordinates")
                        .HasForeignKey("CuencaId");

                    b.HasOne("BiblioMit.Models.PSMB", "PSMB")
                        .WithMany("Coordinates")
                        .HasForeignKey("PSMBId");

                    b.HasOne("BiblioMit.Models.Polygon", "Polygon")
                        .WithMany("Coordinates")
                        .HasForeignKey("PolygonId");
                });

            modelBuilder.Entity("BiblioMit.Models.EnsayoFito", b =>
                {
                    b.HasOne("BiblioMit.Models.Centre", "Centre")
                        .WithMany("EnsayoFitos")
                        .HasForeignKey("CentreId");

                    b.HasOne("BiblioMit.Models.PSMB", "PSMB")
                        .WithMany()
                        .HasForeignKey("PSMBId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BiblioMit.Models.Individual", b =>
                {
                    b.HasOne("BiblioMit.Models.Sampling", "Sampling")
                        .WithMany("Individuals")
                        .HasForeignKey("SamplingId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BiblioMit.Models.Larva", b =>
                {
                    b.HasOne("BiblioMit.Models.Larvae", "Larvae")
                        .WithMany("Larva")
                        .HasForeignKey("LarvaeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BiblioMit.Models.Specie", "Specie")
                        .WithMany()
                        .HasForeignKey("SpecieId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BiblioMit.Models.Larvae", b =>
                {
                    b.HasOne("BiblioMit.Models.Centre", "Centre")
                        .WithMany()
                        .HasForeignKey("CentreId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BiblioMit.Models.PSMB", b =>
                {
                    b.HasOne("BiblioMit.Models.Comuna", "Comuna")
                        .WithMany("PSMBs")
                        .HasForeignKey("ComunaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BiblioMit.Models.Photo", b =>
                {
                    b.HasOne("BiblioMit.Models.Individual", "Individual")
                        .WithMany()
                        .HasForeignKey("IndividualId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BiblioMit.Models.Soft")
                        .WithMany("Photos")
                        .HasForeignKey("SoftId");

                    b.HasOne("BiblioMit.Models.Valve")
                        .WithMany("Photos")
                        .HasForeignKey("ValveId");
                });

            modelBuilder.Entity("BiblioMit.Models.Phytoplankton", b =>
                {
                    b.HasOne("BiblioMit.Models.EnsayoFito", "EnsayoFito")
                        .WithMany("Fitoplanctons")
                        .HasForeignKey("EnsayoFitoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BiblioMit.Models.Groups", "Groups")
                        .WithMany("Phytoplanktons")
                        .HasForeignKey("GroupsId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BiblioMit.Models.Planilla", b =>
                {
                    b.HasOne("BiblioMit.Models.Centre", "Centre")
                        .WithMany("Planillas")
                        .HasForeignKey("CentreId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BiblioMit.Models.Origen", "Origin")
                        .WithMany("Planillas")
                        .HasForeignKey("OrigenId");
                });

            modelBuilder.Entity("BiblioMit.Models.PlataformaUser", b =>
                {
                    b.HasOne("BiblioMit.Models.AppUser", "AppUser")
                        .WithMany("Plataforma")
                        .HasForeignKey("AppUserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BiblioMit.Models.Platform", "Plataform")
                        .WithMany("PlataformaUser")
                        .HasForeignKey("PlataformId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BiblioMit.Models.Polygon", b =>
                {
                    b.HasOne("BiblioMit.Models.Comuna", "Comuna")
                        .WithMany("Polygons")
                        .HasForeignKey("ComunaId");

                    b.HasOne("BiblioMit.Models.Provincia", "Provincia")
                        .WithMany("Polygons")
                        .HasForeignKey("ProvinciaId");

                    b.HasOne("BiblioMit.Models.Region", "Region")
                        .WithMany("Polygons")
                        .HasForeignKey("RegionId");
                });

            modelBuilder.Entity("BiblioMit.Models.Post", b =>
                {
                    b.HasOne("BiblioMit.Models.Forum", "Forum")
                        .WithMany("Posts")
                        .HasForeignKey("ForumId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BiblioMit.Models.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("BiblioMit.Models.PostReply", b =>
                {
                    b.HasOne("BiblioMit.Models.Post", "Post")
                        .WithMany("Replies")
                        .HasForeignKey("PostId");

                    b.HasOne("BiblioMit.Models.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("BiblioMit.Models.ProdEntry", b =>
                {
                    b.HasOne("BiblioMit.Models.AppUser", "AppUser")
                        .WithMany()
                        .HasForeignKey("AppUserId");
                });

            modelBuilder.Entity("BiblioMit.Models.Provincia", b =>
                {
                    b.HasOne("BiblioMit.Models.Region", "Region")
                        .WithMany("Provincias")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BiblioMit.Models.RepStage", b =>
                {
                    b.HasOne("BiblioMit.Models.Spawning", "Spawning")
                        .WithMany("Stage")
                        .HasForeignKey("SpawningId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BiblioMit.Models.Sampling", b =>
                {
                    b.HasOne("BiblioMit.Models.Centre", "Centre")
                        .WithMany("Samplings")
                        .HasForeignKey("CentreId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BiblioMit.Models.Seed", b =>
                {
                    b.HasOne("BiblioMit.Models.Centre", "Centre")
                        .WithMany()
                        .HasForeignKey("CentreId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BiblioMit.Models.Soft", b =>
                {
                    b.HasOne("BiblioMit.Models.Individual", "Individual")
                        .WithMany("Softs")
                        .HasForeignKey("IndividualId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BiblioMit.Models.Spawning", b =>
                {
                    b.HasOne("BiblioMit.Models.Centre", "Centre")
                        .WithMany()
                        .HasForeignKey("CentreId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BiblioMit.Models.SpecieSeed", b =>
                {
                    b.HasOne("BiblioMit.Models.Seed", "Seed")
                        .WithMany("Specie")
                        .HasForeignKey("SeedId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BiblioMit.Models.Specie", "Specie")
                        .WithMany("SpecieSeeds")
                        .HasForeignKey("SpecieId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BiblioMit.Models.Talla", b =>
                {
                    b.HasOne("BiblioMit.Models.SpecieSeed", "SpecieSeed")
                        .WithMany("Tallas")
                        .HasForeignKey("SpecieSeedId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BiblioMit.Models.Valve", b =>
                {
                    b.HasOne("BiblioMit.Models.Individual", "Individual")
                        .WithMany("Valves")
                        .HasForeignKey("IndividualId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("BiblioMit.Models.AppRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("BiblioMit.Models.AppRole")
                        .WithMany("Claims")
                        .HasForeignKey("AppRoleId");

                    b.HasOne("BiblioMit.Models.AppUser")
                        .WithMany("Claims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("BiblioMit.Models.AppUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("BiblioMit.Models.AppRole")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BiblioMit.Models.AppUser")
                        .WithMany("Roles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("BiblioMit.Models.AppUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
